package com.logankells;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

public class DbPlanDataAccessObject implements PlanDataAccessObject {
    private static final String DB_URL = "jdbc:postgresql:meals_db";
    private static final String USER = "postgres";
    private static final String PASS = "1111";
    private static final String CREATE_PLAN = """
            CREATE TABLE IF NOT EXISTS plan (
            plan_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            meal VARCHAR,
            category VARCHAR,
            meal_id INTEGER REFERENCES meals(meal_id),
            day VARCHAR
            );
            """;
    private final DbClient dbClient;

    public DbPlanDataAccessObject() {
        // Connect to the database
        dbClient = new DbClient();
        dbClient.setUrl(DB_URL);
        dbClient.setUser(USER);
        dbClient.setPass(PASS);

        // Create the data structure.
        createTables();
    }

    private void createTables() {
        dbClient.executeUpdateRawSql(CREATE_PLAN);
    }

    @Override
    public Plan findPlanByDayAndCategory(String day, String category) {
        String queryPlan = "SELECT * FROM plan WHERE day = ? AND category = ?";
        try (Connection connection = dbClient.getConnection()) {
            PreparedStatement statement = connection.prepareStatement(queryPlan);
            statement.setString(1, day);
            statement.setString(2, category);

            // Use the first row in the query response as the return Plan
            ResultSet resultSetFromPlan = statement.executeQuery();
            if (resultSetFromPlan.next()) {
                String planCategory = resultSetFromPlan.getString("category");
                int planMealId = resultSetFromPlan.getInt("meal_id");
                String planDay = resultSetFromPlan.getString("day");
                return new Plan(planMealId, planDay, planCategory);
            } else {
                return null;
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void add(Plan plan) {
        String insertPlan = "INSERT INTO plan (category, meal_id, day) VALUES (?, ?, ?);";
        try ( Connection connection = dbClient.getConnection()) {
            PreparedStatement planStatement = connection.prepareStatement(insertPlan);
            planStatement.setString(1, plan.category);
            planStatement.setInt(2, plan.mealId);
            planStatement.setString(3, plan.day);
            planStatement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public int getPlanCount() {
        int planCount = 0;
        String selectCount = "SELECT COUNT(*) FROM plan;";
        try (Connection connection = dbClient.getConnection()) {
            PreparedStatement statement = connection.prepareStatement(selectCount);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                planCount = resultSet.getInt("count");
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return planCount;
    }

    public Map<String, Integer> getPlannedIngredientCounts() {
        Map<String, Integer> ingredientCounts = new HashMap<>();

        String selectIngredientCounts = """
                SELECT i.ingredient, COUNT(i.ingredient) FROM public.ingredients i
                INNER JOIN public.plan p on i.meal_id = p.meal_id
                group by i.ingredient;
                """;
        try (Connection connection = dbClient.getConnection()) {
            PreparedStatement statement = connection.prepareStatement(selectIngredientCounts);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                String ingredient = resultSet.getString("ingredient");
                int count = resultSet.getInt("count");
                ingredientCounts.putIfAbsent(ingredient, count);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return ingredientCounts;
    }

    @Override
    public void update(Plan plan) {

    }

    @Override
    public void deleteById(int id) {

    }
}
